// prisma/schema.prisma

// 1. Подключение к базе — берётся из переменной окружения DATABASE_URL
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 2. Генерация Prisma Client
generator client {
  provider = "prisma-client-js"
}


model User {
  id        String    @id @default(cuid())
  channels  Channel[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Channel {
  id               String            @id @default(cuid())
  name             String
  telegramId       String
  accessToken      String
  userId           String
  theme            String?
  user             User              @relation(fields: [userId], references: [id])
  contents         Content[]
  analysisSettings AnalysisSettings?
  channelAnalysis  ChannelAnalysis?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@unique([userId, telegramId])
}

model AnalysisSettings {
  id                   String   @id @default(cuid())
  minSubscribers       Int      @default(50000)
  minAverageViews      Int      @default(4000)
  numChannelsToAnalyze Int      @default(3)
  specificChannels     String? // Stored as JSON string
  channelId            String   @unique
  channel              Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ChannelAnalysis {
  id               String   @id @default(cuid())
  postPrompts      String // Stored as JSON string
  stylePrompt      String
  postingFrequency Int // Posts per day
  postingTimes     String // Stored as JSON string of hours
  channelId        String   @unique
  channel          Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Content {
  id          String    @id @default(cuid())
  title       String
  text        String
  imageUrl    String?
  status      String    @default("DRAFT") // DRAFT, SCHEDULED, PUBLISHED
  scheduledAt DateTime?
  publishedAt DateTime?
  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
